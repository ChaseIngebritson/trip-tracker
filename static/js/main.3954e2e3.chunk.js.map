{"version":3,"sources":["features/map/Map.module.css","features/map/Map.js","features/geocoder/Geocoder.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","Map","props","mapContainer","createRef","state","map","ready","mapboxgl","accessToken","process","container","this","current","style","zoom","center","pitch","bearing","setState","on","onClick","addSource","setTerrain","addLayer","labelLayerId","layers","getStyle","i","length","type","layout","id","children","renderChildren","React","Children","child","isValidElement","cloneElement","className","styles","ref","Component","Geocoder","geocoder","MapboxGeocoder","addControl","App","e","console","log","counterSlice","createSlice","name","initialState","value","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,aAAe,4B,6MCK3BC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAeC,sBAEpB,EAAKC,MAAQ,CACXC,IAAK,KACLC,OAAO,GAPQ,E,gEAWG,IAAD,OACnBC,IAASC,YAAcC,qGAEvB,IAAMJ,EAAM,IAAIE,IAASP,IAAI,CAC3BU,UAAWC,KAAKT,aAAaU,QAC7BC,MAAO,8DACPC,KAAM,KACNC,OAAQ,EAAE,UAAW,SACrBC,MAAO,GACPC,QAAS,KAGXN,KAAKO,SAAS,CAAEb,QAEhBA,EAAIc,GAAG,QAASR,KAAKV,MAAMmB,SAE3Bf,EAAIc,GAAG,QAAQ,WACbd,EAAIgB,UAAU,aAAc,CAC1B,KAAQ,aACR,IAAO,wCACP,SAAY,IACZ,QAAW,KAIbhB,EAAIiB,WAAW,CAAE,OAAU,aAAc,aAAgB,MAGzDjB,EAAIkB,SAAS,CACX,GAAM,MACN,KAAQ,MACR,MAAS,CACP,WAAY,aACZ,qBAAsB,CAAC,EAAK,GAC5B,+BAAgC,MAQpC,IAHA,IAEIC,EAFAC,EAASpB,EAAIqB,WAAWD,OAGnBE,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IACjC,GAAuB,WAAnBF,EAAOE,GAAGE,MAAqBJ,EAAOE,GAAGG,OAAO,cAAe,CACjEN,EAAeC,EAAOE,GAAGI,GACzB,MAIJ1B,EAAIkB,SAAS,CACX,GAAM,eACN,OAAU,YACV,eAAgB,WAChB,OAAU,CAAC,KAAM,UAAW,QAC5B,KAAQ,iBACR,QAAW,GACX,MAAS,CACP,uBAAwB,OAIxB,wBAAyB,CACvB,cACA,CAAC,UACD,CAAC,QACD,GACA,EACA,MACA,CAAC,MAAO,WAEV,sBAAuB,CACrB,cACA,CAAC,UACD,CAAC,QACD,GACA,EACA,MACA,CAAC,MAAO,eAEV,yBAA0B,KAE3BC,GAEH,EAAKN,SAAS,CAAEZ,OAAO,S,+BAIhB,IAAD,EACeK,KAAKP,MAApBC,EADA,EACAA,IAAKC,EADL,EACKA,MACL0B,EAAarB,KAAKV,MAAlB+B,SAEFC,EAAiBC,IAAMC,SAAS9B,IAAI2B,GAAU,SAAAI,GAClD,OAAIF,IAAMG,eAAeD,GAChBF,IAAMI,aAAaF,EAAO,CAAE/B,QAG9B+B,KAGT,OACE,gCACE,qBACEG,UAAWC,IAAOtC,aAClBuC,IAAK9B,KAAKT,eAGXI,GAAS2B,S,GAtHAC,IAAMQ,W,iBCDlBC,G,wDACJ,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IAEDG,MAAQ,GAHI,E,gEAOjB,IAAMwC,EAAW,IAAIC,IAAe,CAClCrC,YAAaD,IAASC,YACtBD,SAAUA,MAGZI,KAAKV,MAAMI,IAAIyC,WAAWF,K,+BAI1B,OAAO,S,GAjBYV,IAAMQ,Y,MCedK,MAdf,WAKE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,CAAKnB,QANT,SAAqB4B,GACnBC,QAAQC,IAAIF,IAKV,SACE,cAAC,EAAD,S,QCZKG,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAArD,GAKTA,EAAMmD,OAAS,GAEjBG,UAAW,SAAAtD,GACTA,EAAMmD,OAAS,GAEjBI,kBAAmB,SAACvD,EAAOwD,GACzBxD,EAAMmD,OAASK,EAAOC,Y,EAK+BV,EAAaW,QAiBzDX,G,EAjBAM,U,EAAWC,U,EAAWC,kBAiBtBR,EAAf,SCtCeY,cAAe,CAC5BC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAczE,MAAM0E,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3954e2e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapContainer\":\"Map_mapContainer__-HhFw\"};","import React, { createRef } from 'react';\r\nimport mapboxgl from 'mapbox-gl'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\n\r\nimport styles from './Map.module.css';\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.mapContainer = createRef()\r\n\r\n    this.state = {\r\n      map: null,\r\n      ready: false\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOXGL_ACCESS_TOKEN\r\n\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer.current,\r\n      style: 'mapbox://styles/mapbox-map-design/ckhqrf2tz0dt119ny6azh975y',\r\n      zoom: 13.1,\r\n      center: [-114.34411, 32.6141],\r\n      pitch: 85,\r\n      bearing: 80,\r\n    })\r\n\r\n    this.setState({ map })\r\n\r\n    map.on('click', this.props.onClick)\r\n  \r\n    map.on('load', () => {\r\n      map.addSource('mapbox-dem', {\r\n        'type': 'raster-dem',\r\n        'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\r\n        'tileSize': 512,\r\n        'maxzoom': 14\r\n      })\r\n  \r\n      // add the DEM source as a terrain layer with exaggerated height\r\n      map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 })\r\n       \r\n      // add a sky layer that will show when the map is highly pitched\r\n      map.addLayer({\r\n        'id': 'sky',\r\n        'type': 'sky',\r\n        'paint': {\r\n          'sky-type': 'atmosphere',\r\n          'sky-atmosphere-sun': [0.0, 0.0],\r\n          'sky-atmosphere-sun-intensity': 15\r\n        }\r\n      })\r\n\r\n      // Insert the layer beneath any symbol layer.\r\n      var layers = map.getStyle().layers;\r\n \r\n      var labelLayerId;\r\n      for (var i = 0; i < layers.length; i++) {\r\n        if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {\r\n          labelLayerId = layers[i].id;\r\n          break;\r\n        }\r\n      }\r\n \r\n      map.addLayer({\r\n        'id': '3d-buildings',\r\n        'source': 'composite',\r\n        'source-layer': 'building',\r\n        'filter': ['==', 'extrude', 'true'],\r\n        'type': 'fill-extrusion',\r\n        'minzoom': 15,\r\n        'paint': {\r\n          'fill-extrusion-color': '#aaa',\r\n      \r\n          // use an 'interpolate' expression to add a smooth transition effect to the\r\n          // buildings as the user zooms in\r\n          'fill-extrusion-height': [\r\n            'interpolate',\r\n            ['linear'],\r\n            ['zoom'],\r\n            15,\r\n            0,\r\n            15.05,\r\n            ['get', 'height']\r\n          ],\r\n          'fill-extrusion-base': [\r\n            'interpolate',\r\n            ['linear'],\r\n            ['zoom'],\r\n            15,\r\n            0,\r\n            15.05,\r\n            ['get', 'min_height']\r\n          ],\r\n          'fill-extrusion-opacity': 0.6\r\n        }\r\n      }, labelLayerId);\r\n\r\n      this.setState({ ready: true })\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const { map, ready } = this.state\r\n    const { children } = this.props\r\n\r\n    const renderChildren = React.Children.map(children, child => {\r\n      if (React.isValidElement(child)) {\r\n        return React.cloneElement(child, { map })\r\n      }\r\n\r\n      return child\r\n    })\r\n\r\n    return(\r\n      <div>\r\n        <div \r\n          className={styles.mapContainer} \r\n          ref={this.mapContainer} \r\n        />\r\n\r\n        {ready && renderChildren}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport { Map }","import React from 'react';\r\nimport mapboxgl from 'mapbox-gl'\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\r\n\r\nclass Geocoder extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {}\r\n  }\r\n\r\n  componentDidMount () {\r\n    const geocoder = new MapboxGeocoder({\r\n      accessToken: mapboxgl.accessToken,\r\n      mapboxgl: mapboxgl\r\n    })\r\n\r\n    this.props.map.addControl(geocoder)\r\n  }\r\n\r\n  render () {\r\n    return null\r\n  }\r\n}\r\n\r\nexport { Geocoder }","import React from 'react';\r\n\r\nimport { Map } from './features/map/Map';\r\nimport { Geocoder } from './features/geocoder/Geocoder'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  function onMapClick (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Map onClick={onMapClick}>\r\n        <Geocoder />\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}